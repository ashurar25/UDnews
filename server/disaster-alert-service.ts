
import { notificationService } from './notification-service';
import { storage } from './storage';

export interface DisasterAlert {
  id: string;
  type: 'earthquake' | 'flood' | 'storm' | 'fire' | 'tsunami' | 'drought' | 'other';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  area: string;
  coordinates?: {
    lat: number;
    lng: number;
  };
  startTime: string;
  endTime?: string;
  instructions: string;
  source: string;
  isActive: boolean;
}

class DisasterAlertService {
  private alerts: DisasterAlert[] = [];
  private checkInterval: NodeJS.Timeout | null = null;

  constructor() {
    this.startMonitoring();
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥
  startMonitoring() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    this.checkInterval = setInterval(() => {
      this.checkForDisasters();
    }, 15 * 60 * 1000);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    this.checkForDisasters();
    console.log('üö® Disaster Alert System started - monitoring every 15 minutes');
  }

  stopMonitoring() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å API ‡∏ï‡πà‡∏≤‡∏á‡πÜ
  async checkForDisasters() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏∏‡∏ô‡∏¥‡∏¢‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ (TMD)
      await this.checkTMDAlerts();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å API ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô USGS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß
      await this.checkUSGSEarthquakes();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ keywords ‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥
      await this.checkNewsForDisasters();

    } catch (error) {
      console.error('Error checking for disasters:', error);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏∏‡∏ô‡∏¥‡∏¢‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤
  async checkTMDAlerts() {
    try {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏∏‡∏ô‡∏¥‡∏¢‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤
      // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ API key ‡πÅ‡∏•‡∏∞ endpoint ‡∏à‡∏£‡∏¥‡∏á
      const response = await fetch('https://api.tmd.go.th/api/warnings', {
        headers: {
          'Accept': 'application/json',
          // 'Authorization': `Bearer ${process.env.TMD_API_KEY}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        await this.processWeatherAlerts(data);
      }
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
      await this.simulateWeatherCheck();
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏à‡∏≤‡∏Å USGS
  async checkUSGSEarthquakes() {
    try {
      const response = await fetch('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_day.geojson');
      if (!response.ok) return;

      const data = await response.json();
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
      const thaiRegion = data.features.filter((earthquake: any) => {
        const [lng, lat] = earthquake.geometry.coordinates;
        // ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        return lat >= 5 && lat <= 21 && lng >= 95 && lng <= 110;
      });

      for (const earthquake of thaiRegion) {
        const magnitude = earthquake.properties.mag;
        const [lng, lat] = earthquake.geometry.coordinates;
        
        if (magnitude >= 4.5) {
          const alert: DisasterAlert = {
            id: `earthquake-${earthquake.id}`,
            type: 'earthquake',
            severity: magnitude >= 6.0 ? 'critical' : magnitude >= 5.0 ? 'high' : 'medium',
            title: `‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß ‡∏Ç‡∏ô‡∏≤‡∏î ${magnitude.toFixed(1)} ‡∏£‡∏¥‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå`,
            description: `‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏ô‡∏≤‡∏î ${magnitude.toFixed(1)} ‡∏£‡∏¥‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢`,
            area: earthquake.properties.place || '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á',
            coordinates: { lat, lng },
            startTime: new Date(earthquake.properties.time).toISOString(),
            instructions: magnitude >= 5.0 
              ? '‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏ö‡∏†‡∏±‡∏¢‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏Å‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô'
              : '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°',
            source: 'USGS',
            isActive: true
          };

          if (!this.alerts.find(a => a.id === alert.id)) {
            await this.processNewAlert(alert);
          }
        }
      }
    } catch (error) {
      console.error('Error checking USGS earthquakes:', error);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ keyword ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥
  async checkNewsForDisasters() {
    try {
      const disasterKeywords = [
        '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°', '‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢', '‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß', '‡∏û‡∏≤‡∏¢‡∏∏', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏†‡∏±‡∏¢',
        '‡πÑ‡∏ü‡∏õ‡πà‡∏≤', '‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏á', '‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥', '‡∏î‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏•‡∏ô‡∏ñ‡∏•‡πà‡∏°', '‡∏ü‡πâ‡∏≤‡∏ú‡πà‡∏≤'
      ];

      const recentNews = await storage.getAllNews();
      const today = new Date();
      today.setHours(today.getHours() - 2); // ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤

      for (const news of recentNews) {
        const newsDate = new Date(news.publishedAt);
        if (newsDate < today) continue;

        const hasDisasterKeyword = disasterKeywords.some(keyword => 
          news.title.includes(keyword) || news.summary.includes(keyword)
        );

        if (hasDisasterKeyword && news.category === '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô') {
          const alert: DisasterAlert = {
            id: `news-disaster-${news.id}`,
            type: 'other',
            severity: 'medium',
            title: `‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß: ${news.title.substring(0, 50)}...`,
            description: news.summary,
            area: '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ',
            startTime: news.publishedAt,
            instructions: '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á',
            source: 'UD News',
            isActive: true
          };

          if (!this.alerts.find(a => a.id === alert.id)) {
            await this.processNewAlert(alert);
          }
        }
      }
    } catch (error) {
      console.error('Error checking news for disasters:', error);
    }
  }

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  async simulateWeatherCheck() {
    const random = Math.random();
    
    // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢ 5% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if (random < 0.05) {
      const alerts = [
        {
          type: 'storm' as const,
          severity: 'high' as const,
          title: '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á',
          description: '‡∏°‡∏µ‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ',
          instructions: '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏ö‡∏†‡∏±‡∏¢‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
        },
        {
          type: 'flood' as const,
          severity: 'medium' as const,
          title: '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô',
          description: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏â‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏ô',
          instructions: '‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏û‡∏¢‡∏û'
        }
      ];

      const selectedAlert = alerts[Math.floor(Math.random() * alerts.length)];
      const alert: DisasterAlert = {
        id: `sim-${Date.now()}`,
        ...selectedAlert,
        area: '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ',
        startTime: new Date().toISOString(),
        endTime: new Date(Date.now() + 6 * 60 * 60 * 1000).toISOString(), // 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        source: 'TMD Simulation',
        isActive: true
      };

      await this.processNewAlert(alert);
    }
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà
  async processNewAlert(alert: DisasterAlert) {
    this.alerts.push(alert);
    console.log(`üö® New disaster alert: ${alert.title}`);

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Push Notification
    await this.sendDisasterNotifications(alert);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πà‡∏ß‡∏ô
    await this.saveAsBreakingNews(alert);
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥
  async sendDisasterNotifications(alert: DisasterAlert) {
    try {
      // ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Push Notification
      const subscriptions = await storage.getAllActivePushSubscriptions();
      
      for (const subscription of subscriptions) {
        await notificationService.sendPushNotification(
          subscription,
          `üö® ${alert.title}`,
          `/disaster-alert/${alert.id}`
        );
      }

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πà‡∏ß‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏±‡∏¢‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á)
      if (alert.severity === 'critical' || alert.severity === 'high') {
        const subscribers = await storage.getAllNewsletterSubscribers();
        const emails = subscribers.map(sub => sub.email);
        
        if (emails.length > 0) {
          await notificationService.sendBreakingNewsEmail(
            emails,
            `üö® ${alert.title}`,
            `${process.env.BASE_URL}/disaster-alert/${alert.id}`
          );
        }
      }
    } catch (error) {
      console.error('Error sending disaster notifications:', error);
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πà‡∏ß‡∏ô
  async saveAsBreakingNews(alert: DisasterAlert) {
    try {
      const newsData = {
        title: alert.title,
        summary: alert.description,
        content: `
          <div class="disaster-alert">
            <h2>üö® ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥</h2>
            <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> ${this.getDisasterTypeName(alert.type)}</p>
            <p><strong>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á:</strong> ${this.getSeverityName(alert.severity)}</p>
            <p><strong>‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:</strong> ${alert.area}</p>
            <p><strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</strong> ${alert.description}</p>
            <div class="instructions">
              <h3>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h3>
              <p>${alert.instructions}</p>
            </div>
            <p><em>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ${alert.source}</em></p>
          </div>
        `,
        category: '‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πà‡∏ß‡∏ô',
        author: '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢',
        tags: ['‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥', alert.type, alert.area],
        isBreaking: true,
        publishedAt: alert.startTime
      };

      await storage.insertNews(newsData);
    } catch (error) {
      console.error('Error saving disaster alert as news:', error);
    }
  }

  // ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
  getActiveAlerts(): DisasterAlert[] {
    return this.alerts.filter(alert => {
      if (!alert.isActive) return false;
      
      if (alert.endTime) {
        return new Date() < new Date(alert.endTime);
      }
      
      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ endTime ‡πÉ‡∏´‡πâ active ‡∏ô‡∏≤‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      const alertTime = new Date(alert.startTime);
      const now = new Date();
      return (now.getTime() - alertTime.getTime()) < 24 * 60 * 60 * 1000;
    });
  }

  // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢
  deactivateAlert(alertId: string) {
    const alert = this.alerts.find(a => a.id === alertId);
    if (alert) {
      alert.isActive = false;
    }
  }

  private getDisasterTypeName(type: string): string {
    const types = {
      'earthquake': '‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß',
      'flood': '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
      'storm': '‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á',
      'fire': '‡πÑ‡∏ü‡∏õ‡πà‡∏≤',
      'tsunami': '‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥',
      'drought': '‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏á',
      'other': '‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };
    return types[type] || type;
  }

  private getSeverityName(severity: string): string {
    const severities = {
      'low': '‡∏ï‡πà‡∏≥',
      'medium': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      'high': '‡∏™‡∏π‡∏á',
      'critical': '‡∏ß‡∏¥‡∏Å‡∏§‡∏ï'
    };
    return severities[severity] || severity;
  }
}

export const disasterAlertService = new DisasterAlertService();
